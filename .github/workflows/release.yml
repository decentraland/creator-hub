name: Release
on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
    secrets:
      MACOS_CSC_LINK:
        description: 'Certificate to sign dmg file'
        required: true
      MACOS_CSC_KEY_PASSWORD:
        description: 'Password to decrypt the certificate file'
        required: true
      MACOS_NOTARIZATION_APPLE_ID:
        description: 'Apple ID used for notarization'
        required: true
      MACOS_NOTARIZATION_TEAM_ID:
        description: 'Team ID used for notarization'
        required: true
      MACOS_NOTARIZATION_PWD:
        description: 'Password used for notarization'
        required: true

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true


defaults:
  run:
    shell: 'bash'


jobs:
  draft_release:

    permissions:
      contents: write # Allows this job to create releases

    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - uses: actions/setup-node@v4
        with:
          cache: 'npm'

      - run: npm ci
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - run: echo MODE=$MODE && npm run build
        env:
          MODE: ${{ !inputs.dry-run && 'production' || 'development' }}

          
      - name: Save APPLE_TEAM_ID into electron-builder.yml
        # This is necessary for the notarization of the app in MacOS to work
        if: ${{github.ref == 'refs/heads/main' && matrix.os == 'macos-latest' && !inputs.dry-run}}
        env:
          APPLE_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
        run: sed -e "s|\$APPLE_TEAM_ID|$APPLE_TEAM_ID|" electron-builder.yml > electron-builder-with-apple-team-id.yml && mv electron-builder-with-apple-team-id.yml electron-builder.yml

      - name: Generate Release Version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: ""
          version_format: ${major}.${minor}.${patch}
          major_pattern: "/^(major|breaking).+/"
          minor_pattern: "/^(minor|feat).+/"
          bump_each_commit: false
          bump_each_commit_patch_pattern: "/^(patch|fix).+/"
          search_commit_body: true
          user_format_type: "json"

      - name: Compile artifacts ${{ inputs.dry-run && '' || 'and upload them to github release' }}
        # I use this action because it is capable of retrying multiple times if there are any issues with the distribution server
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60
          max_attempts: 6
          retry_wait_seconds: 15
          retry_on: error
          shell: 'bash'
          # Due to this issue https://github.com/electron-userland/electron-builder/issues/6411 the build with npx when rebuilding native dependencies hangs forever
          # see https://github.com/cawa-93/vite-electron-builder/pull/953
          command: ./node_modules/.bin/electron-builder --config electron-builder.yml --config.extraMetadata.version=${{ steps.version.outputs.version }} --publish ${{ inputs.dry-run && 'never' || 'always' }}
        env:
          # Code Signing params
          # See https://www.electron.build/code-signing
          CSC_LINK: ${{ secrets.MACOS_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
          # Notarization params
          # See https://www.electron.build/configuration/mac#NotarizeNotaryOptions
          APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
          # Publishing artifacts
          GH_TOKEN: ${{ secrets.github_token }} # GitHub token, automatically provided (No need to define this secret in the repo settings)
