name: Creator Hub
on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
      inspector_s3_bucket_key:
        description: 'S3 bucket key for the inspector package'
        required: true
        type: string
      inspector_version:
        description: 'Version of the inspector package'
        required: true
        type: string
      inspector_changed:
        description: 'Whether the version of the inspector package has changed'
        required: true
        type: boolean

concurrency:
  group: creator-hub-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: install
        run: make install

      - name: install inspector
        working-directory: packages/creator-hub
        run: |
          # If the inspector version hasn't changed or we are on main branch, we need to install the latest version
          # Otherwise, we need to install the version from the S3 bucket

          if [[ "${{ github.ref }}" == "refs/heads/main" || ${{ inputs.inspector_changed }} == "false" ]]; then
            echo "Installing latest inspector version: ${{ inputs.inspector_version }}"
            npm install @dcl/inspector@${{ inputs.inspector_version }}
          else
            echo "Installing inspector version from S3 bucket: ${{ inputs.inspector_s3_bucket_key }}"
            npm install ${{ secrets.SDK_TEAM_S3_BASE_URL }}/${{ inputs.inspector_s3_bucket_key }}
          fi

      - name: build
        run: make build-creator-hub
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          NODE_OPTIONS: "--max-old-space-size=8192"
          MODE: ${{ !inputs.dry-run && 'production' || 'development' }}
          VITE_SEGMENT_CREATORS_HUB_API_KEY: ${{ secrets.VITE_SEGMENT_CREATORS_HUB_API_KEY }}
          VITE_SEGMENT_INSPECTOR_API_KEY: ${{ secrets.VITE_SEGMENT_INSPECTOR_API_KEY }}
          VITE_ALLOWED_EXTERNAL_ORIGINS: ${{ secrets.VITE_ALLOWED_EXTERNAL_ORIGINS }}
          CHROME_DEVTOOLS_ARCHIVE_DOWNLOAD_URL: ${{ secrets.CHROME_DEVTOOLS_ARCHIVE_DOWNLOAD_URL }}
          # Sentry AUTH Token
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Bump release version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: ""
          version_format: ${major}.${minor}.${patch}
          major_pattern: "/^(major|breaking).+/"
          minor_pattern: "/^(minor|feat).+/"
          bump_each_commit: false
          bump_each_commit_patch_pattern: "/^(patch|fix).+/"
          search_commit_body: true
          user_format_type: "json"

      # Download 'SSLcom/esigner-codesign' to a folder called 'esigner-codesign' in the root of the project
      - name: Checkout esigner-codesign repository (Windows)
        if: ${{github.ref == 'refs/heads/main' && matrix.os == 'windows-latest' && !inputs.dry-run}}
        uses: actions/checkout@v3
        with:
          repository: 'SSLcom/esigner-codesign'
          path: esigner-codesign

      - name: Compile creator-hub artifacts ${{ inputs.dry-run && ' ' || 'and upload them to github release' }}
        # I use this action because it is capable of retrying multiple times if there are any issues with the distribution server
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60
          max_attempts: 6
          retry_wait_seconds: 15
          retry_on: error
          shell: 'bash'
          command: npx electron-builder --project packages/creator-hub --config electron-builder.cjs --config.extraMetadata.version=${{ steps.version.outputs.version }} ${{ matrix.os == 'macos-latest' && format('--config.mac.notarize={0}', true) || '' }} --publish ${{ inputs.dry-run && 'never' || 'always' }}
        env:
          # Disable hard links to avoid issues with npm
          USE_HARD_LINKS: false
          # Fix C++ standard for native dependencies
          CXXFLAGS: "-std=gnu++17"
          # Code Signing params
          # See https://www.electron.build/code-signing
          CSC_LINK: ${{ secrets.MACOS_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
          # Notarization params
          # See https://www.electron.build/configuration/mac#NotarizeNotaryOptions
          APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
          # Publishing artifacts
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub token, automatically provided (No need to define this secret in the repo settings)
          GITHUB_REPOSITORY: ${{ github.repository }}
          EP_PRE_RELEASE: true # Publish as pre-release
          # The following are the parameters required by the esigner-codesign action to work, we must explicitly pass in even the optional ones since we're not using the action directly, but from the checked out repo
          CODE_SIGN_SCRIPT_PATH: ${{ matrix.os == 'windows-latest' && format('{0}\\esigner-codesign\\dist\\index.js', github.workspace) || '' }}
          INPUT_COMMAND: "sign"
          INPUT_FILE_PATH: "${{ github.workspace }}\\dist\\Decentraland Creator Hub-${{ steps.version.outputs.version }}-win-x64.exe"
          INPUT_OVERRIDE: "true"
          INPUT_MALWARE_BLOCK: "false"
          INPUT_CLEAN_LOGS: "false"
          INPUT_JVM_MAX_MEMORY: "1024M"
          INPUT_ENVIRONMENT_NAME: "PROD"
          INPUT_USERNAME: ${{ secrets.ES_USERNAME }}
          INPUT_PASSWORD: ${{ secrets.ES_PASSWORD }}
          INPUT_TOTP_SECRET: ${{ secrets.ES_TOTP_SECRET }}
          INPUT_CREDENTIAL_ID: ${{ secrets.WINDOWS_CREDENTIAL_ID_SIGNER }}

      - name: Move artifacts to upload folder
        if: ${{ github.event.pull_request.number }}
        working-directory: packages/creator-hub
        run: sh -c 'mkdir dist/upload && cp dist/*.dmg dist/*.exe dist/upload 2> /dev/null || :'

      - name: Upload to S3
        if: ${{ github.event.pull_request.number }}
        id: upload
        working-directory: packages/creator-hub
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SDK_TEAM_AWS_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SDK_TEAM_AWS_SECRET }}
        run: |
          npx @dcl/cdn-uploader@next \
            --bucket ${{ secrets.SDK_TEAM_S3_BUCKET }} \
            --local-folder dist/upload \
            --bucket-folder creator-hub/branch/${{ github.head_ref }}

      - name: Set specific windows instructions
        if: ${{ github.event.pull_request.number && matrix.os == 'windows-latest' }}
        id: windows-instructions
        run: |
          echo "list<<EOF" >> $GITHUB_ENV
          echo "[win-x64](${{ secrets.SDK_TEAM_S3_BASE_URL }}/creator-hub/branch/${{ github.head_ref }}/Decentraland%20Creator%20Hub-${{ steps.version.outputs.version }}-win-x64.exe)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Set specific macos instructions
        if: ${{ github.event.pull_request.number && matrix.os == 'macos-latest' }}
        id: macos-instructions
        run: |
          echo "list<<EOF" >> $GITHUB_ENV
          echo "[mac-x64](${{ secrets.SDK_TEAM_S3_BASE_URL }}/creator-hub/branch/${{ github.head_ref }}/Decentraland%20Creator%20Hub-${{ steps.version.outputs.version }}-mac-x64.dmg)" >> $GITHUB_ENV
          echo "[mac-arm64](${{ secrets.SDK_TEAM_S3_BASE_URL }}/creator-hub/branch/${{ github.head_ref }}/Decentraland%20Creator%20Hub-${{ steps.version.outputs.version }}-mac-arm64.dmg)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          content=$(cat ./.github/workflows/macos-instructions.md)
          echo "macos-instructions<<EOF" >> $GITHUB_ENV
          echo "$content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Find Comment
        if: ${{ github.event.pull_request.number }}
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Test this pull request on ${{ matrix.os }}

      - name: Create or update comment
        if: ${{ github.event.pull_request.number }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            # Test this pull request on ${{ matrix.os }}
            #### Download the correct version for your architecture:
              ${{ env.list }}

              ${{ env.macos-instructions }}
          edit-mode: replace
